---
drone:
  persistentVolume:
    storageClass: csi-cinder-sc-delete-all-zones
  env:
    DRONE_SERVER_PROTO: https

    DRONE_RPC_SECRET: <path:kv/data/k3s/argocd/drone#rpc_secret>

    DRONE_DATABASE_DRIVER: postgres
    DRONE_DATABASE_DATASOURCE: postgres://drone:<path:kv/data/k3s/argocd/drone#postgres_password>@drone-postgresql-primary:5432/drone?sslmode=disable
    DRONE_DATABASE_SECRET: <path:kv/data/k3s/argocd/drone#postgres_secret>

    DRONE_GIT_ALWAYS_AUTH: true

    DRONE_GITEA_CLIENT_ID: <path:kv/data/k3s/argocd/drone#gitea_client_id>
    DRONE_GITEA_CLIENT_SECRET: <path:kv/data/k3s/argocd/drone#gitea_client_secret>

  ingress:
    enabled: true
    className: nginx
    annotations:
      "cert-manager.io/cluster-issuer": "letsencrypt-prod"

drone-runner-kube:
  rbac:
    buildNamespaces:
      - drone
  env:
    DRONE_RPC_SECRET: <path:kv/data/k3s/argocd/drone#rpc_secret>
    DRONE_NAMESPACE_DEFAULT: drone
    DRONE_RPC_HOST: drone:8080

  ingress:
    enabled: true
    className: nginx
    annotations:
      "cert-manager.io/cluster-issuer": "letsencrypt-prod"

postgresql:
  auth:
    postgresPassword: <path:kv/data/k3s/argocd/drone#postgres_postgres_password>
    username: drone
    password: <path:kv/data/k3s/argocd/drone#postgres_password>
    database: drone
    replicationPassword: <path:kv/data/k3s/argocd/drone#postgres_replication_password>
  primary:
    persistence:
      storageClass: csi-cinder-sc-delete-all-zones
  startupProbe:
    enabled: true
  serviceAccount:
    create: true
    name: drone
  rbac:
    create: true

